def test_VertebraSeg1(self):
    """ Ideally you should have several levels of tests.  At the lowest level
    tests should exercise the functionality of the logic with different inputs
    (both valid and invalid).  At higher levels your tests should emulate the
    way the user would interact with your code and confirm that it still works
    the way you intended.
    One of the most important features of the tests is that it should alert other
    developers when their changes will have an impact on the behavior of your
    module.  For example, if a developer removes a feature that you depend on,
    your test should break so they know that the feature is needed.
    """

    self.delayDisplay("Starting the test")
    #
    # first, get some data
    #
    sampleDataLogic = SampleData.SampleDataLogic()
    masterVolumeNode = sampleDataLogic.downloadCTACardio() ##slicer.mrmlScene
      
    
      
    listVar = slicer.util.getNode('F')
    length = listVar.GetNumberOfFiducials()

    for x in range(length):

      fidList = slicer.util.getNode('F')    
      segmentationNode = slicer.vtkMRMLSegmentationNode()
      segmentationNode.SetName('VertebraL' + str(x+1))
      slicer.mrmlScene.AddNode(segmentationNode)
      segmentationNode.CreateDefaultDisplayNodes() # only needed for display
      segmentationNode.SetReferenceImageGeometryParameterFromVolumeNode(masterVolumeNode)
      
      fidRAS = [0,0,0]
      fidList.GetNthFiducialPosition(x, fidRAS)
      volumeID = fidList.GetNthFiducialAssociatedNodeID(0)
      volumeNode = slicer.mrmlScene.GetNodeByID(volumeID)
      rasToIJK = vtk.vtkMatrix4x4()
      volumeNode.GetRASToIJKMatrix(rasToIJK)
      fidRAS4 = [fidRAS[0], fidRAS[1], fidRAS[2], 1.0]
      fidIJK = rasToIJK.MultiplyFloatPoint(fidRAS4)
      
      lumbarSeed = vtk.vtkSphereSource()
      lumbarSeed.SetCenter(fidRAS[0], fidRAS[1], fidRAS[2])
      lumbarSeed.SetRadius(5)
      lumbarSeed.Update()
      
      slicer.util.selectModule('SegmentEditor')
      segmentationNode.AddSegmentFromClosedSurfaceRepresentation(lumbarSeed.GetOutput(), "Lumbar-" + str(x+1), [random(), random(), random()], str(x+1))
      ##segmentEditorWidget = slicer.qMRMLSegmentEditorWidget()
      ##segmentEditorWidget.setMRMLScene(slicer.mrmlScene)
      segmentEditorWidget = slicer.modules.segmenteditor.widgetRepresentation().self().editor
      segmentEditorNode = slicer.vtkMRMLSegmentEditorNode()
      slicer.mrmlScene.AddNode(segmentEditorNode)
      segmentEditorWidget.setMRMLSegmentEditorNode(segmentEditorNode)
      segmentEditorWidget.setSegmentationNode(segmentationNode)
      segmentEditorWidget.setMasterVolumeNode(masterVolumeNode)
      segmentEditorWidget.setActiveEffectByName("Local Threshold")
      effect = segmentEditorWidget.activeEffect() ##open segment editor tab
      effect.setParameter("MinimumThreshold", "265")
      effect.setParameter("MaximumThreshold", "1009")
      effect.setParameter("MinimumDiameterMm", "9")
      effect.setParameter("SegmentationAlgorithm", "GrowCut")
      points = vtk.vtkPoints()
      points.InsertNextPoint(fidIJK[0:3])
      effect.self().apply(points)

      
    logic = VertebraSegLogic()
    self.assertIsNotNone( logic.hasImageData(volumeNode) )

    self.run(masterVolumeNode, outputVolume, 100, 0) ##should it be process?
    
    self.delayDisplay('Test passed!')

  
